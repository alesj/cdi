<chapter id="packagingdeployment">
  <title>Packaging and deployment</title>
  
  <para>When an application is started, the container must perform
  <emphasis>bean discovery</emphasis>, detect definition errors and 
  deployment problems and raise events that allow portable extensions 
  to integrate with the deployment lifecycle.</para>
  
  <para>Bean discovery is the process of determining:</para>
    
  <itemizedlist>
    <listitem>
      <para>The bean archives that exist in the application, and the beans 
      they contain</para>
    </listitem>
    <listitem>
      <para>Which alternatives, interceptors and decorators are 
      <emphasis>enabled</emphasis> for each bean archive</para>
    </listitem>
    <listitem>
      <para>The <emphasis>ordering</emphasis> of enabled interceptors and 
      decorators</para>
    </listitem>
  </itemizedlist>
  
  <para>Additional beans may be registered programmatically with the 
  container by the application or a portable extension after the automatic
  bean discovery completes. Portable extensions may even integrate with 
  the process of building the <literal>Bean</literal> object for a bean, to 
  enhance the container's built-in functionality.</para>
  
  <section id="beanarchive">
    <title>Bean archives</title>
    
    <para>Bean classes of enabled beans must be deployed in <emphasis>bean 
    archives</emphasis>.</para>
    
    <itemizedlist>
      <listitem>
        <para>A library jar, EJB jar, application client jar or rar archive is a 
        bean archive if it has a file named <literal>beans.xml</literal> in the 
        <literal>META-INF</literal> directory.</para>
      </listitem>
      <listitem>
        <para>The <literal>WEB-INF/classes</literal> directory of a war is a bean 
        archive if there is a file named <literal>beans.xml</literal> in the 
        <literal>WEB-INF</literal> directory of the war.</para>
      </listitem>
      <listitem>
        <para>A directory in the JVM classpath is a bean archive if it has a file 
        named <literal>beans.xml</literal> in the <literal>META-INF</literal> 
        directory.</para>
      </listitem>
    </itemizedlist>
    
    <para>The container is not required to support application client jar bean 
    archives.</para>
    
    <para>A Java EE container is required by the Java EE specification to support 
    Java EE modules. Other containers may or may not provide support for war, EJB 
    jar or rar bean archives.</para>
    
    <para>The container searches for beans in all bean archives in the application
    classpath:</para>
    
    <itemizedlist>
      <listitem>
        <para>In an application deployed as an ear, the container searches every bean 
        archive bundled with or referenced by the ear, including bean archives bundled 
        with or referenced by wars and EJB jars contained in the ear. The bean archives 
        might be library jars, EJB jars, rars or war <literal>WEB-INF/classes</literal> 
        directories.</para>
      </listitem>
      <listitem>
        <para>In an application deployed as a war, the container searches every bean 
        archive bundled with or referenced by the war. The bean archives might be 
        library jars or the <literal>WEB-INF/classes</literal> directory.</para>
      </listitem>
      <listitem>
        <para>In an application deployed as an EJB jar, the container searches the EJB 
        jar, if it is a bean archive, and every bean archive referenced by the EJB jar.</para>
      </listitem>
      <listitem>
        <para>An embeddable EJB container searches each bean archive in the JVM classpath 
        that is listed in the value of the embeddable container initialization property 
        <literal>javax.ejb.embeddable.modules</literal>, or every bean archive in the JVM 
        classpath if the property is not specified. The bean archives might be directories, 
        library jars or EJB jars.</para>
      </listitem>
    </itemizedlist>
    
    <para>When searching for beans, the container considers:</para>
    
    <itemizedlist>
      <listitem>
        <para>any Java class in any bean archive,</para>
      </listitem>
      <listitem>
        <para>any <literal>ejb-jar.xml</literal> file in the metadata directory
        of any EJB bean archive,</para>
      </listitem>
      <listitem>
        <para>any Java class referenced by the <literal>@New</literal> qualifier
        of an injection point of another bean, and</para>
      </listitem>
      <listitem>
        <para>any interceptor or decorator class declared in the 
        <literal>beans.xml</literal> file of any bean archive.</para>
      </listitem>
    </itemizedlist>
    
    <para>If a bean class is deployed in two different bean archives, non-portable 
    behavior results. Portable applications must deploy each bean class in no more 
    than one bean archive.</para>
    
    <para>If an enum declaring injection points is defined in installed library jars,
    non-portable behavior results.</para>
    
    <para>Bean archives may contain classes which are not deployed as beans. For example
    a bean archive might contain message driven beans.</para>
    
    <para>An extension may be deployed in any archive, including those that are not bean archives.</para>
    
  </section>
  
  <section id="initialization">
    <title>Application initialization lifecycle</title>
    
    <para>When an application is started, the container performs the
    following steps:</para>
    
    <itemizedlist>
      <listitem>
        <para>First, the container must search for service providers
        for the service <literal>javax.enterprise.inject.spi.Extension</literal>
        defined in <xref linkend="initevents"/>, instantiate a single 
        instance of each service provider, and search the service provider 
        class for observer methods of initialization events.</para>
      </listitem>
      <listitem>
        <para>Next, the container must fire an event of type 
        <literal>BeforeBeanDiscovery</literal>, as defined in
        <xref linkend="bbd"/>.</para>
      </listitem>
      <listitem>
        <para>Next, the container must perform bean discovery, and abort 
        initialization of the application if any definition errors exist, 
        as defined in <xref linkend="exceptions"/>. Additionally, for 
        every Java EE component class supporting injection that may be 
        instantiated by the container at runtime, the container must create 
        an <literal>InjectionTarget</literal> for the class, as defined in 
        <xref linkend="it"/>, and fire an event of type  
        <literal>ProcessInjectionTarget</literal>, as defined in 
        <xref linkend="pit"/>.</para>
      </listitem>
      <listitem>
        <para>Next, the container must fire an event of type 
        <literal>AfterBeanDiscovery</literal>, as defined in
        <xref linkend="abd"/>, and abort initialization of the application 
        if any observer registers a definition error.</para>
      </listitem>
      <listitem>
        <para>Next, the container must detect deployment problems by 
        validating bean dependencies and specialization and abort 
        initialization of the application if any deployment problems 
        exist, as defined in <xref linkend="exceptions"/>.</para>
      </listitem>
      <listitem>
        <para>Next, the container must fire an event of type 
        <literal>AfterDeploymentValidation</literal>, as defined in
        <xref linkend="adv"/>, and abort initialization of the application 
        if any observer registers a deployment problem.</para>
      </listitem>
      <listitem>
         <para>Next, the container must inject any enums declaring injection
         points.</para>
      </listitem>
      <listitem>
        <para>Finally, the container begins directing requests to the 
        application.</para>
      </listitem>
    </itemizedlist>
    
  </section>
  
    <section id="shutdown">
    <title>Application shutdown lifecycle</title>
    
    <para>When an application is stopped, the container performs the
    following steps:</para>
    
    <itemizedlist>
      <listitem>
        <para>First, the container must destroy all contexts.</para>
      </listitem>
      <listitem>
        <para>Next, the container must destroy dependent objects 
        injected into enums.</para>
      </listitem>
      <listitem>
        <para>Finally, the container must fire an event of type 
        <literal>BeforeShutdown</literal>, as defined in
        <xref linkend="bs"/>.</para>
      </listitem>
    </itemizedlist>
    
  </section>
  
  <section id="beandiscovery">
    <title>Bean discovery</title>
    
    <para>The container automatically discovers managed beans (according to 
    the rules of <xref linkend="whatclassesarebeans"/>) and session beans 
    in bean archives and searches the bean classes for producer methods, 
    producer fields, disposer methods and observer methods.</para>
    
    <para>For each Java class or interface deployed in a bean archive, the 
    container must:</para>
    
    <itemizedlist>
      <listitem>
        <para>create an <literal>AnnotatedType</literal> representing the type
        and fire an event of type <literal>ProcessAnnotatedType</literal>, as 
        defined in <xref linkend="pat"/>, and then</para>
      </listitem>
      <listitem>
        <para>inspect the type metadata to determine if it is a bean or other 
        Java EE component class supporting injection, and then</para>
      </listitem>
      <listitem>
        <para>detect definition errors by validating the class and its metadata,
        and then</para>
      </listitem>
      <listitem>
        <para>if the class is a managed bean, session bean, or other Java EE 
        component class supporting injection, create an 
        <literal>InjectionTarget</literal> for the class, as defined in 
        <xref linkend="it"/>, and fire an event of type  
        <literal>ProcessInjectionTarget</literal>, as defined in 
        <xref linkend="pit"/>, and then</para>
      </listitem>
      <listitem>
        <para>if the class is an enabled bean, interceptor or decorator, create a 
        <literal>Bean</literal> object that implements the rules defined in 
        <xref linkend="managedbeanlifecycle"/>, <xref linkend="statefullifecycle"/> 
        or <xref linkend="statelesslifecycle"/>, and fire an event which is a subtype 
        of <literal>ProcessBean</literal>, as defined in <xref linkend="pb"/>.</para>
      </listitem>
    </itemizedlist>
    
    <para>For each enabled bean, the container must search the class for producer 
    methods and fields, including resources, and for each producer method or field:</para>
    
    <itemizedlist>
      <listitem>
        <para>create a <literal>Producer</literal>, as defined in <xref linkend="it"/>, 
        and fire an event of type <literal>ProcessProducer</literal>, as defined in 
        <xref linkend="pp"/>, and then</para>
      </listitem>
      <listitem>
        <para>if the producer method or field is enabled, create a <literal>Bean</literal> 
        object that implements the rules defined in <xref linkend="producermethodlifecycle"/>, 
        <xref linkend="producerfieldlifecycle"/> or <xref linkend="resourcelifecycle"/>, 
        and fire an event which is a subtype of <literal>ProcessBean</literal>, as 
        defined in <xref linkend="pb"/>.</para>
      </listitem>
    </itemizedlist>
    
    <para>For each enabled bean, the container must search the class for observer
    methods, and for each observer method:</para>
    
    <itemizedlist>
      <listitem>
        <para>create an <literal>ObserverMethod</literal> object, as defined in 
        <xref linkend="observermethod"/> and fire an event of type
        <literal>ProcessObserverMethod</literal>, as defined in 
        <xref linkend="pom"/>.</para>
      </listitem>
    </itemizedlist>

    <para>The container determines which alternatives, interceptors and decorators 
    are enabled, according to the rules defined in <xref linkend="enablement"/>, 
    <xref linkend="enabledinterceptors"/> and <xref linkend="enableddecorators"/>, 
    taking into account any <literal>&lt;alternatives&gt;</literal>, 
    <literal>&lt;interceptors&gt;</literal> and <literal>&lt;decorators&gt;</literal> 
    declarations in the <literal>beans.xml</literal> files, and registers the 
    <literal>Bean</literal> and <literal>ObserverMethod</literal> objects:</para>
    
    <itemizedlist>
      <listitem>
        <para>For each enabled bean that is not an interceptor or decorator, the 
        container registers an instance of the <literal>Bean</literal> interface 
        defined in <xref linkend="bean"/>.</para>
      </listitem>
      <listitem>
        <para>For each enabled interceptor, the container registers an instance of 
        the <literal>Interceptor</literal> interface defined in 
        <xref linkend="interceptor"/>.</para>
      </listitem>
      <listitem>
        <para>For each enabled decorator, the container registers an instance of 
        the <literal>Decorator</literal> interface defined in 
        <xref linkend="decorator"/>.</para>
      </listitem>
      <listitem>
        <para>For each observer method of every enabled bean, the container 
        registers an instance of the <literal>ObserverMethod</literal> interface 
        defined in <xref linkend="observermethod"/>.</para>
      </listitem>
    </itemizedlist>
    
  </section>
    
  <section id="el">
    <title>Integration with Unified EL</title>
    
    <para>The container must provide a Unified EL <literal>ELResolver</literal> 
    to the servlet engine and JSF implementation that resolves bean EL names
    using the rules of name resolution defined in <xref linkend="nameresolution"/>
    and resolving ambiguities according to <xref linkend="ambignames"/>.</para>
    
    <itemizedlist>
      <!--  
      <listitem>
        <para>If a name used in an EL expression resolves to more than one bean, the 
        <literal>ELResolver</literal> must throw an 
        <literal>AmbiguousResolutionException</literal>.</para>
      </listitem>
      -->
      <listitem>
        <para>If a name used in an EL expression does not resolve to any bean, the 
        <literal>ELResolver</literal> must return a null value.</para>
      </listitem>
      <listitem>
        <para>Otherwise, if a name used in an EL expression resolves to exactly one 
        bean, the <literal>ELResolver</literal> must return a contextual instance of 
        the bean, as defined in <xref linkend="contextualinstance"/>.</para>
      </listitem>
    </itemizedlist>
    
  </section>
  
</chapter>