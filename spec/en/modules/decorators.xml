<?xml version="1.0" encoding="UTF-8"?>
<chapter id="decorators"> 
  <title>Decorators</title>
    
  <para>A <emphasis>decorator</emphasis> implements one or more bean types and 
  intercepts business method invocations of beans which implement those bean 
  types. These bean types are called <emphasis>decorated types</emphasis>.</para>
  
  <para>Decorators are superficially similar to interceptors, but because they
  directly implement operations with business semantics, they are able to 
  implement business logic and, conversely, unable to implement the cross-cutting
  concerns for which interceptors are optimized.</para>
    
  <para>Decorators may be associated with any managed bean that is not itself an 
  interceptor or decorator or with any EJB session bean. A decorator instance is
  a dependent object of the object it decorates.</para>

  <section id="decoratorbean">
    <title>Decorator beans</title>
    
    <para>A decorator is a managed bean. The set of decorated types of a decorator 
    includes all bean types of the managed bean which are Java interfaces, except 
    for <literal>java.io.Serializable</literal>. The decorator bean class and its 
    superclasses are not decorated types of the decorator. The decorator class may 
    be abstract.</para>
    
    <!--
    <para><emphasis>Alternative definition: the set of decorated types includes all 
    interfaces implemented directly and indirectly by both the decorator bean
    class and the declared type of the delegate.</emphasis></para>
    -->
        
    <!--
    <para><emphasis>Open issue: can we use decorators for introduction of new bean types?
    (no, at least not for EJBs)</emphasis></para>
    -->
    
    <para>Decorators of a session bean must comply with the bean provider programming 
    restrictions defined by the EJB specification. Decorators of a stateful session 
    bean must comply with the rules for instance passivation and conversational state 
    defined by the EJB specification.</para>
          
    <section id="decoratorannotation">
      <title>Declaring a decorator</title>
    
      <para>A decorator is declared by annotating the bean class with the 
      <literal>@javax.decorator.Decorator</literal> stereotype.</para>

      <programlisting>@Decorator
class TimestampLogger implements Logger { ... }</programlisting>

    </section>
    <!--
    <section id="decorators.xml">
      <title>Declaring a decorator using XML</title>
      
       <para>Additional decorators may be declared in <literal>beans.xml</literal>,
       using the decorator bean class name and the <literal>&lt;Decorator&gt;</literal> 
       element:</para>
      
       <programlisting><![CDATA[<myfwk:TimestampLogger>
    <Decorator/>
    ...
</myfwk:TimestampLogger>]]></programlisting>

       <para>If the decorator bean class is already annotated 
       <literal>@Decorator</literal>, two different decorators exist.</para>

    </section>
    -->
    <section id="delegateattribute">
      <title>Decorator delegate injection points</title>
      
      <para>All decorators have a <emphasis>delegate injection point</emphasis>. A 
      delegate injection point is an injection point of the bean class. The type and 
      qualifiers of the injection point are called the <emphasis>delegate
      type</emphasis> and <emphasis>delegate qualifiers</emphasis>. The decorator 
      applies to beans that are assignable to the delegate injection point.</para>
      
      <para>The delegate injection point must be declared by annotating the injection
      point with the annotation <literal>@javax.decorator.Delegate</literal>:</para>
      
      <programlisting>@Decorator
class TimestampLogger implements Logger {
    @Inject @Delegate @Any Logger logger;
    ...
}</programlisting>

      <!--
      <programlisting><![CDATA[<myfwk:TimestampLogger>
    <Decorator/>
    <myfwk:logger>
        <Decorates>
            <myfwk:Logger>
               <Any/>
            </myfwk:Logger>
        </Decorates>
    </myfwk:logger>
</myfwk:TimestampLogger>]]></programlisting>
      -->

      <programlisting>@Decorator
class TimestampLogger implements Logger {
    private Logger logger;
    
    @Inject
    public TimestampLogger(@Delegate @Debug Logger logger) {
        this.logger=logger;
    }
    ...
}</programlisting>
      <!--
      <programlisting><![CDATA[<myfwk:TimestampLogger>
    <Decorator/>
    <myfwk:logger>
        <Decorates>
            <myfwk:Logger>
                <myfwk:Debug/>
            </myfwk:Logger>
        </Decorates>
    </myfwk:logger>
</myfwk:TimestampLogger>]]></programlisting>
      -->
      
      <para>A decorator must have exactly one delegate injection point. If a decorator 
      has more than one delegate injection point, or does not have a delegate injection 
      point, the container automatically detects the problem and treats it as a 
      definition error.</para>
      
      <para>The delegate injection point must be an injected field, initializer method
      parameter or bean constructor method parameter. If an injection point that is not
      an injected field, initializer method parameter or bean constructor method parameter
      is annotated <literal>@Delegate</literal>, the container automatically detects the 
      problem and treats it as a definition error.</para>
      
      <para>If a bean class that is not a decorator has an injection point annotated
      <literal>@Delegate</literal>, the container automatically detects the problem 
      and treats it as a definition error.</para>
      
      <para>The container must inject a <emphasis>delegate</emphasis> object to the 
      delegate injection point. The delegate object implements the delegate type and
      delegates method invocations to remaining uninvoked decorators and eventually to 
      the bean. When the container calls a decorator during business method interception, 
      the decorator may invoke any method of the delegate object.</para>
      
      <programlisting>@Decorator 
class TimestampLogger implements Logger { 
    @Inject @Delegate @Any Logger logger; 
 
    void log(String message) {
        logger.log( timestamp() + ": " + message );
    }
    ...
}</programlisting>

      <para>If a decorator invokes the delegate object at any other time, the invoked
      method throws an <literal>IllegalStateException</literal>.</para>

   </section>
    
    <section>
      <title>Decorated types of a decorator</title>
      
      <para>The delegate type of a decorator must implement or extend every decorated 
      type (with exactly the same type parameters). If the delegate type does not 
      implement or extend a decorated type of the decorator (or specifies different
      type parameters), the container automatically detects the problem and treats it 
      as a definition error.</para>
      
      <para>A decorator is not required to implement the delegate type.</para>
      
      <para>A decorator may be an abstract Java class, and is not required to 
      implement every method of every decorated type. Whenever the decorator does
      not implement a method of the decorated type, the container will provide an 
      implicit implementation that calls the method on the delegate. If a decorator 
      has abstract methods that are not declared by a decorated type, the container 
      automatically detects the problem and treats it as a definition error. </para>
      
      <para>The decorator intercepts every method which is declared by a decorated type
	of the decorator and is implemented by the bean class of the decorator.</para>
 
     </section>

    </section>

    <section id="enableddecorators">
      <title>Decorator enablement and ordering</title>

      <para>By default, a bean archive has no enabled decorators. A decorator must be 
      explicitly enabled by listing its bean class under the 
      <literal>&lt;decorators&gt;</literal> element of the <literal>beans.xml</literal>
      file of the bean archive.</para>
    
      <programlisting><![CDATA[<beans xmlns="http://java.sun.com/xml/ns/javaee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/beans_1_0.xsd">
   <decorators>
      <class>org.mycompany.myfwk.TimestampLogger</class>
      <class>org.mycompany.myfwk.IdentityLogger</class>
   </decorators>
</beans>]]></programlisting>

      <para>The order of the decorator declarations determines the decorator ordering. 
      Decorators which occur earlier in the list are called first.</para>
    
      <para>Each child <literal>&lt;class&gt;</literal> element must specify the name
      of a decorator bean class. If there is no class with the specified name, or if 
      the class with the specified name is not a decorator bean class, the container 
      automatically detects the problem and treats it as a deployment problem.</para>

      <para>If the same class is listed twice under the <literal>&lt;decorators&gt;</literal>
      element, the container automatically detects the problem and treats it as a 
      deployment problem.</para>
      
      <para>Decorators are called after interceptors.</para>
      
      <para>A decorator is said to be <emphasis>enabled</emphasis> if it is enabled 
      in at least one bean archive.</para>
            
      <!--
      <para><emphasis>Open issue: Is this the right thing? Would it be better to unify 
      interceptors and decorators into a single stack, so that they can be interleaved?</emphasis></para>
      -->
      
    </section>
    
    <section id="decoratorresolution">
      <title>Decorator resolution</title>
      
      <para>The process of matching decorators to a certain bean is called 
      <emphasis>decorator resolution</emphasis>. A decorator is bound to a bean 
      if:</para>

      <itemizedlist>
        <listitem>
          <para>The bean is assignable to the delegate injection point according 
          to the rules defined in <xref linkend="typesaferesolution"/> (using
          <xref linkend="assignableparametersdec"/>).</para>
        </listitem>
        <listitem>
          <para>The decorator is enabled in the bean archive containing the bean.</para>
        </listitem>
      </itemizedlist>
    
      <para>If a decorator matches a managed bean, and the managed bean class is 
      declared final, the container automatically detects the problem and treats it 
      as a deployment problem.</para>
      
      <para>If a decorator matches a managed bean with a non-static, non-private, 
      final method, and the decorator also implements that method, the container 
      automatically detects the problem and treats it as a deployment problem.</para>
      
      <para>For a custom implementation of the <literal>Decorator</literal> interface
      defined in <xref linkend="decorator"/>, the container calls 
      <literal>getDelegateType()</literal>, <literal>getDelegateQualifiers()</literal>
      and <literal>getDecoratedTypes()</literal> to determine the delegate type and
      qualifiers and decorated types of the decorator.</para>
    
      <section id="assignableparametersdec">
      <title>Assignability of raw and parameterized types for delegate injection points</title>
      
      <para>Decorator delegate injection points have a special set of rules for 
      determining assignability of raw and parameterized types, as an exception to
      <xref linkend="assignableparameters"/>.</para>

      <para>A raw bean type is considered assignable to a parameterized delegate type if 
      the raw types are identical and all type parameters of the delegate type are either
      unbounded type variables or <literal>java.lang.Object</literal>.</para>

      <para>A parameterized bean type is considered assignable to a parameterized delegate 
      type if they have identical raw type and for each parameter:</para>
      
      <itemizedlist>
        <listitem>
          <para>the delegate type parameter and the bean type parameter are actual 
          types with identical raw type, and, if the type is parameterized, the bean 
          type parameter is assignable to the delegate type parameter according to 
          these rules, or</para>
        </listitem>
        <listitem>
          <para>the delegate type parameter is a wildcard, the bean type parameter is 
          an actual type and the actual type is assignable to the upper bound, if any, 
          of the wildcard and assignable from the lower bound, if any, of the wildcard, 
          or</para>
        </listitem>
        <listitem>
          <para>the delegate type parameter is a wildcard, the bean type parameter is 
          a type variable and the upper bound of the type variable is assignable to 
          the upper bound, if any, of the wildcard and assignable from the lower bound, 
          if any, of the wildcard, or</para>
        </listitem>
        <listitem>
          <para>the delegate type parameter and the bean type parameter are both type 
          variables and the upper bound of the bean type parameter is assignable to the 
          upper bound, if any, of the delegate type parameter, or</para>
        </listitem>
        <listitem>
          <para>the delegate type parameter is a type variable, the bean type parameter 
          is an actual type, and the actual type is assignable to the upper bound, if 
          any, of the type variable.</para>
        </listitem>
      </itemizedlist>
      </section>
      
    </section>
    
    <section id="decoratorinvocation">
      <title>Decorator invocation</title>
      
      <para>Whenever a business method is invoked on an instance of a bean with
      decorators, the container intercepts the business method invocation and, 
      after processing all interceptors of the method, invokes decorators of the 
      bean.</para>
      
      <para>The container searches for the first decorator of the instance that implements 
      the method that is being invoked as a business method. If no such decorator 
      exists, the container invokes the business method of the intercepted instance. 
      Otherwise, the container calls the method of the decorator.</para>
      
      <para>When any decorator is invoked by the container, it may in turn invoke a 
      method of the delegate. The container intercepts the delegate invocation and 
      searches for the first decorator of the instance such that:</para>

      <itemizedlist>
        <listitem>
          <para>the decorator occurs after the decorator invoking the delegate, 
          and</para>
        </listitem>
        <listitem>
          <para>the decorator implements the method that is being invoked upon
          the delegate.</para>
        </listitem>
      </itemizedlist>
      
      <para>If no such decorator exists, the container invokes the business 
      method of the intercepted instance. Otherwise, the container calls the 
      method of the decorator.</para>
      
    </section>
  
</chapter>