<?xml version="1.0" encoding="UTF-8"?>
<chapter id="lifecycle">
  <title>Lifecycle of contextual instances</title>

  <para>The lifecycle of a contextual instance of a bean is managed by the context 
  object for the bean's scope, as defined in <xref linkend="contexts"/>.</para>
  
  <para>Every bean in the system is represented by an instance of the
  <literal>Bean</literal> interface defined in <xref linkend="bean"/>. This 
  interface is a subtype of <literal>Contextual</literal>. To create and destroy 
  contextual instances, the context object calls the <literal>create()</literal> 
  and <literal>destroy()</literal> operations defined by the interface 
  <literal>Contextual</literal>, as defined in <xref linkend="contextual"/>.</para>
  
  <section>
    <title>Restriction upon bean instantiation</title>
  
    <para>The managed bean and EJB specifications place very few programming
    restrictions upon the bean class of a bean. In particular, the class is a 
    concrete class and is not required to implement any special interface or 
    extend any special superclass. Therefore, bean classes are easy to instantiate 
    and unit test.</para>

    <para>However, if the application directly instantiates a bean class, instead 
    of letting the container perform instantiation, the resulting instance is not 
    managed by the container and is not a contextual instance as defined by 
    <xref linkend="contextualinstance"/>. Furthermore, the capabilities listed in 
    <xref linkend="capabilities"/> will not be available to that particular 
    instance. In a deployed application, it is the container that is responsible 
    for instantiating beans and initializing their dependencies.</para>

    <para>If the application requires more control over instantiation of a 
    contextual instance, a producer method or field may be used. Any Java object 
    may be returned by a producer method or field. It is not required that the 
    returned object be a contextual reference for a bean. However, if the object 
    is not a contextual reference for another bean, the object will be contextual
    instance of the producer method bean, and therefore available for injection 
    into other objects and use in EL expressions, but the other capabilities 
    listed in <xref linkend="capabilities"/> will not be available to the 
    object.</para>
    
    <para>In the following example, a producer method returns instances of other 
    beans:</para>
    
    <programlisting>@SessionScoped
public class PaymentStrategyProducer implements Serializable {
   
   private PaymentStrategyType paymentStrategyType;
   
   public void setPaymentStrategyType(PaymentStrategyType type) {
      paymentStrategyType = type;
   }

   @Produces PaymentStrategy getPaymentStrategy(@CreditCard PaymentStrategy creditCard,
                                                @Cheque PaymentStrategy cheque,
                                                @Online PaymentStrategy online) {
      switch (paymentStrategyType) {
         case CREDIT_CARD: return creditCard;
         case CHEQUE: return cheque;
         case ONLINE: return online;
         default: throw new IllegalStateException();
      }    
    }

}</programlisting>

    <para>In this case, any object returned by the producer method has already had 
    its dependencies injected, receives lifecycle callbacks and event notifications 
    and may have interceptors.</para>
    
    <para>But in this example, the returned objects are not contextual instances:</para>

    <programlisting>@SessionScoped
public class PaymentStrategyProducer implements Serializable {
   
   private PaymentStrategyType paymentStrategyType;

   public void setPaymentStrategyType(PaymentStrategyType type) {
      paymentStrategyType = type;
   }

   @Produces PaymentStrategy getPaymentStrategy() {
      switch (paymentStrategyType) {
         case CREDIT_CARD: return new CreditCardPaymentStrategy();
         case CHEQUE: return new ChequePaymentStrategy();
         case ONLINE: return new OnlinePaymentStrategy();
         default: throw new IllegalStateException();
      }    
    }

}</programlisting>

    <para>In this case, any object returned by the producer method will not have
    any dependencies injected by the container, receives no lifecycle callbacks or
    event notifications and does not have interceptors or decorators.</para>
    
  </section>
  
  <section id="bizmethod">
    <title>Container invocations and interception</title>
    
    <para>When the application invokes:</para>
    
    <itemizedlist>
    <listitem>
      <para>a method of a bean via a contextual reference to the bean, as defined 
      in <xref linkend="contextualreference"/>, or</para>
    </listitem>
    <listitem>
      <para>a business method of a session bean via an EJB remote or local 
      reference,</para>
    </listitem>
    </itemizedlist>
    
    <para>the invocation is treated as a <emphasis>business method invocation</emphasis>.</para>

    <para>When the container invokes a method of a bean, the invocation may 
    or may not be treated as a business method invocation:</para>
    
    <itemizedlist>
      <listitem>
        <para>Invocations of initializer methods by the container are not
        business method invocations.</para>
      </listitem>
      <listitem>
        <para>Invocations of producer, disposer and observer methods by the 
        container are business method invocations and are intercepted by 
        method interceptors and decorators.</para>
      </listitem>
      <listitem>
        <para>Invocation of lifecycle callbacks by the container are not 
        business method invocations, but are intercepted by interceptors 
        for lifecycle callbacks.</para>
      </listitem>
      <listitem>
        <para>Invocation of EJB timer service timeouts by the container are 
        not business method invocations, but are intercepted by interceptors 
        for EJB timeouts.</para>
      </listitem>
      <listitem>
        <para>Invocations of interceptors and decorator methods during
        method or lifecycle callback interception are not business
        method invocations, and therefore no recursive interception
        occurs.</para>
      </listitem>
      <listitem>
        <para>Invocations of message listener methods of message-driven
        beans during message delivery are business method invocations.</para>
      </listitem>
	  <listitem>
        <para>Invocations of methods declared by java.lang.Object are not 
	     business method invocations.</para>
      </listitem>
    </itemizedlist>
    
    <para>If, and only if, an invocation is a business method invocation:</para>
    
    <itemizedlist>
      <listitem>
        <para>it passes through method interceptors and decorators, and</para>
      </listitem>
      <listitem>
        <para>in the case of a session bean, it is subject to EJB services 
        such as declarative transaction management, concurrency, security 
        and asynchronicity, as defined by the EJB specification.</para>
      </listitem>
    </itemizedlist>
    
    <para>Otherwise, the invocation is treated as a normal Java method call 
    and is not intercepted by the container.</para>
    
  </section>
  
  <section>
    <title>Lifecycle of contextual instances</title>
  
  <para>The actual mechanics of bean creation and destruction varies according to 
  what kind of bean is being created or destroyed.</para>
  
  <section id="managedbeanlifecycle">
    <title>Lifecycle of managed beans</title>
    
    <para>When the <literal>create()</literal> method of the <literal>Bean</literal>
    object that represents a managed bean is called, the container obtains an 
    instance of the bean, as defined by the Managed Beans specification, calling 
    the bean constructor as defined by <xref linkend="instantiation"/>, and 
    performing dependency injection as defined in 
    <xref linkend="fieldsinitializermethods"/>.</para>
  
    <para>When the <literal>destroy()</literal> method is called, the container 
    destroys the instance, as defined by the Managed Beans specification, and 
    any dependent objects, as defined in <xref linkend="destruction"/>.</para>
  
  </section>
  
  <section id="statefullifecycle">
    <title>Lifecycle of stateful session beans</title>
    
    <para>When the <literal>create()</literal> method of a <literal>Bean</literal>
    object that represents a stateful session bean that is called, the container 
    creates and returns a container-specific internal local reference to a new 
    session bean instance. The reference must be passivation capable. This reference 
    is not directly exposed to the application.</para>
    
    <para>Before injecting or returning a contextual instance to the application,
    the container transforms its internal reference into an object that implements
    the bean types expected by the application and delegates method invocations to
    the underlying stateful session bean instance. This object must be
    passivation capable.</para>
    
    <para>When the <literal>destroy()</literal> method is called, and if the underlying 
    EJB was not already removed by direct invocation of a remove method by the application, 
    the container removes the stateful session bean. The <literal>@PreDestroy</literal> 
    callback must be invoked by the container.</para>
    
    <para>Note that the container performs additional work when the underlying EJB is 
    created and removed, as defined in <xref linkend="injection"/></para>
    
  </section>
  
  <section id="statelesslifecycle">
    <title>Lifecycle of stateless session and singleton beans</title>
        
    <para>When the <literal>create()</literal> method of a <literal>Bean</literal>
    object that represents a stateless session or singleton session bean is called, 
    the container creates and returns a container-specific internal local reference 
    to the session bean. This reference is not directly exposed to the 
    application.</para>
    
    <para>Before injecting or returning a contextual instance to the application,
    the container transforms its internal reference into an object that implements
    the bean types expected by the application and delegates method invocations to
    the underlying session bean. This object must be passivation capable.</para>
    
    <para>When the <literal>destroy()</literal> method is called, the container 
    simply discards this internal reference.</para>
    
    <para>Note that the container performs additional work when the underlying EJB is 
    created and removed, as defined in <xref linkend="injection"/></para>
    
  </section>
  
  <section id="producermethodlifecycle">
    <title>Lifecycle of producer methods</title>

    <para>When the <literal>create()</literal> method of a <literal>Bean</literal>
    object that represents a producer method is called, the container must invoke 
    the producer method as defined by <xref linkend="methods"/>. 
    The return value of the producer method, after method interception completes, 
    is the new contextual instance to be returned by <literal>Bean.create()</literal>.</para>
    
    <para>If the producer method returns a null value and the producer method 
    bean has the scope <literal>@Dependent</literal>, the <literal>create()</literal>
    method returns a null value.</para>

    <para>Otherwise, if the producer method returns a null value, and the scope of
    the producer method is not <literal>@Dependent</literal>, the <literal>create()</literal> 
    method throws an <literal>IllegalProductException</literal>.</para> 
    
    <para>When the <literal>destroy()</literal> method is called, and if there is
    a disposer method for this producer method, the container must invoke the 
    disposer method as defined by <xref linkend="methods"/>, passing the instance 
    given to <literal>destroy()</literal> to the disposed parameter. Finally, the 
    container destroys dependent objects, as defined in 
    <xref linkend="destruction"/>.</para>
        
  </section>
  
  <section id="producerfieldlifecycle">
    <title>Lifecycle of producer fields</title>

    <para>When the <literal>create()</literal> method of a <literal>Bean</literal>
    object that represents a producer field is called, the container must access 
    the producer field as defined by <xref linkend="fields"/> 
    to obtain the current value of the field. The value of the producer field is 
    the new contextual instance to be returned by <literal>Bean.create()</literal>.</para>
    
    <para>If the producer field contains a null value and the producer field 
    bean has the scope <literal>@Dependent</literal>, the <literal>create()</literal>
    method returns a null value.</para>

    <para>Otherwise, if the producer field contains a null value, and the scope of
    the producer field is not <literal>@Dependent</literal>, the <literal>create()</literal> 
    method throws an <literal>IllegalProductException</literal>.</para>
    
    <para>When the <literal>destroy()</literal> method is called, and if there is
    a disposer method for this producer field, the container must invoke the 
    disposer method as defined by <xref linkend="methods"/>, passing the instance 
    given to <literal>destroy()</literal> to the disposed parameter.</para>
        
  </section>
  
  <section id="resourcelifecycle">
    <title>Lifecycle of resources</title>
        
    <para>When the <literal>create()</literal> method of a <literal>Bean</literal>
    object that represents a resource is called, the container creates and returns 
    a container-specific internal reference to the Java EE component environment 
    resource, entity manager, entity manager factory, remote EJB instance or web 
    service reference. This reference is not directly exposed to the application.</para>
    
    <para>Before injecting or returning a contextual instance to the application,
    the container transforms its internal reference into an object that implements
    the bean types expected by the application and delegates method invocations to
    the underlying resource, entity manager, entity manager factory, remote EJB 
    instance or web service reference. This object must be passivation capable.</para>
    
    <para>The container must perform ordinary Java EE component environment
    injection upon any non-static field that functions as a resource declaration, 
    as defined by the Java EE platform and Common Annotations for the Java platform 
    specifications. The container is not required to perform Java EE component 
    environment injection upon a static field. Portable applications should not rely 
    upon the value of a static field that functions as a resource declaration.</para>
    
    <para>References to EJBs and web services are always dependent scoped and a new
    instance must be obtained for every injection performed.</para>
    
    <para>For an entity manager associated with a resource definition, it must behave 
    as though it were injected directly using <literal>@PersistencContext</literal>.</para>
    
    <para>When the <literal>destroy()</literal> method of a bean which represents a 
    remote stateful EJB reference is called, the container will <emphasis>not</emphasis> 
    automatically destroy the EJB reference. The application must explicitly call the
    method annotated <literal>@Remove</literal>. This beahvior differs to that 
    specified in <xref linkend="statefullifecycle" /> for beans which represent a 
    local stateful EJB reference</para>
    
  </section>
  
  <!--
  <section id="jmslifecycle">
    <title>Lifecycle of message destinations</title>
    
    <para>An instance of a message destination is a <emphasis>proxy object</emphasis>, 
    provided by the container, that implements all the bean types specified in 
    <xref linkend="jmstypes"/>, delegating the actual implementation of these 
    methods directly to the underlying JMS objects. This proxy object must be 
    passivation capable.</para>
    
    <para>A message destination proxy object is a dependent object of the object 
    it is injected into.</para>
    
    <para>When the <literal>create()</literal> method of a <literal>Bean</literal>
    object that represents a message destination is called, the container creates 
    and returns a proxy object.</para>
    
    <para>The methods of this proxy object delegate to JMS objects obtained as 
    needed using the metadata provided by the message destination declaration.</para>
    
    <itemizedlist>
      <listitem>
        <para>The <literal>Destination</literal> is obtained using the metadata 
        specified by <literal>@Resource</literal>.</para>
      </listitem>
      <listitem>
        <para>The appropriate <literal>ConnectionFactory</literal> for the topic
        or queue is obtained using the metadata specified by 
        <literal>@ConnectionFactory</literal>.</para>
      </listitem>
      <listitem>
        <para>The <literal>Connection</literal> is obtained by calling
        <literal>QueueConnectionFactory.createQueueConnection()</literal> or 
        <literal>TopicConnectionFactory.createTopicConnection()</literal>. 
        The container is permitted to share a connection between multiple 
        proxy objects.</para>
      </listitem>
      <listitem>
        <para>The <literal>Session</literal> object is obtained by calling
        <literal>QueueConnection.createQueueSession()</literal> or 
        <literal>TopicConnection.createTopicSession()</literal>.</para>
      </listitem>
      <listitem>
        <para>The <literal>MessageProducer</literal> object is obtained by 
        calling <literal>QueueSession.createSender()</literal> or 
        <literal>TopicSession.createPublisher()</literal>.</para>
      </listitem>
      <listitem>
        <para>The <literal>MessageConsumer</literal> object is obtained by 
        calling <literal>QueueSession.createReceiver()</literal> or 
        <literal>TopicSession.createSubscriber()</literal>.</para>
      </listitem>
    </itemizedlist>

    <para>When the <literal>destroy()</literal> method is called, the container 
    must ensure that all JMS objects created by the proxy object are destroyed 
    by calling <literal>close()</literal> if necessary.</para>

    <itemizedlist>
      <listitem>
        <para>The <literal>Connection</literal> is destroyed by calling
        <literal>Connection.close()</literal> if necessary. If the 
        connection is being shared between multiple proxy objects, the 
        container is not required to close the connection when the proxy 
        is destroyed.</para>
      </listitem>
      <listitem>
        <para>The <literal>Session</literal> object is destroyed by calling
        <literal>Session.close()</literal>.</para>
      </listitem>
      <listitem>
        <para>The <literal>MessageProducer</literal> object is destroyed by 
        calling <literal>MessageProducer.close()</literal>.</para>
      </listitem>
      <listitem>
        <para>The <literal>MessageConsumer</literal> object is destroyed by 
        calling <literal>MessageConsumer.close()</literal>.</para>
      </listitem>
    </itemizedlist>
    
    <para>The <literal>close()</literal> method of a message destination proxy
    object always throws an <literal>UnsupportedOperationException</literal>.</para>
    
    <para>The container must perform ordinary Java EE component environment
    injection upon any non-static field that functions as a message destination 
    declaration, as defined by the Java EE platform and Common Annotations for the 
    Java platform specifications. The container is not required to perform Java EE 
    component environment injection upon a static field. Portable applications 
    should not rely upon the value of a static field that functions as a message 
    destination declaration.</para>
    
  </section>
  -->
  
  </section>
    
</chapter>