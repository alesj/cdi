<chapter id="architecture">
    <title>Architecture</title>
    
    <para>This specification defines a powerful set of complementary services that help 
    improve the structure of application code.</para>
    
    <itemizedlist>
        <listitem>
            <para>A well-defined lifecycle for stateful objects bound to 
            <emphasis>lifecycle contexts</emphasis>, where the set of contexts is 
            extensible</para>
        </listitem>
        <listitem>
            <para>A sophisticated, typesafe <emphasis>dependency injection</emphasis> 
            mechanism, including the ability to select dependencies at either 
            development or deployment time, without verbose configuration</para>
        </listitem>
        <listitem>
            <para>Support for Java EE modularity and the Java EE component 
            architecture&mdash;the modular structure of a Java EE application is 
            taken into account when resolving dependencies between Java EE components</para>
        </listitem>
        <listitem>
            <para>Integration with the Unified Expression Language (EL), allowing 
            any contextual object to be used directly within a JSF or JSP page</para>
        </listitem>
        <listitem>
            <para>The ability to <emphasis>decorate</emphasis> injected objects</para> 
        </listitem>
        <listitem>
            <para>The ability to associate interceptors to objects via typesafe
            <emphasis>interceptor bindings</emphasis></para>
        </listitem>
        <listitem>
            <para>An <emphasis>event notification</emphasis> model</para>
        </listitem>
        <listitem>
            <para>A web <emphasis>conversation context</emphasis> in addition to the 
            three standard web contexts defined by the Java Servlets specification</para>
        </listitem>
        <listitem>
            <para>An SPI allowing <emphasis>portable extensions</emphasis> to integrate 
            cleanly with the container</para>
        </listitem>
    </itemizedlist>
    
    <para>The services defined by this specification allow objects to be bound to lifecycle 
    contexts, to be injected, to be associated with interceptors and decorators, and to 
    interact in a loosely coupled fashion by firing and observing events. Various kinds of 
    objects are injectable, including EJB 3 session beans, managed beans and Java EE 
    resources. We refer to these objects in general terms as <emphasis>beans</emphasis> 
    and to instances of beans that belong to contexts as <emphasis>contextual instances</emphasis>. 
    Contextual instances may be injected into other objects by the dependency injection 
    service.</para>
        
    <para>To take advantage of these facilities, the developer provides additional 
    bean-level metadata in the form of Java annotations and application-level metadata 
    in the form of an XML descriptor.</para>
    
    <para>The use of these services significantly simplifies the task of creating Java 
    EE applications by integrating the Java EE web tier with Java EE enterprise services. 
    In particular, EJB components may be used as JSF managed beans, thus integrating 
    the programming models of EJB and JSF.</para> 
    
    <para>It's even possible to integrate with third-party frameworks. A portable 
    extension may provide objects to be injected or obtain contextual instances using 
    the dependency injection service. The framework may even raise and observe events 
    using the event notification service.</para>
    
    <para>An application that takes advantage of these services may be designed to execute 
    in either the Java EE environment or the Java SE environment. If the application uses 
    Java EE services such as transaction management and persistence in the Java SE 
    environment, the services are usually restricted to, at most, the subset defined for 
    embedded usage by the EJB specification.</para>
        
    <section>
      <title>Contracts</title>
      <para>
          This specification defines the responsibilities of:
      </para>
      <itemizedlist>
        <listitem>
          <para>the application developer who uses these services, and</para>
        </listitem>
        <listitem>
          <para>the vendor who implements the functionality defined by this specification 
          and provides a runtime environment in which the application executes.</para>
        </listitem> 
      </itemizedlist>
      <para> 
          This runtime environment is called the <emphasis>container</emphasis>.
          For example, the container might be a Java EE container or an embeddable 
          EJB container.
      </para>
      <para>
        <xref linkend="concepts"/>, <xref linkend="implementation"/>,
        <xref linkend="inheritance"/>, <xref linkend="interceptors"/>,
        <xref linkend="decoratorbean"/> and <xref linkend="observermethods"/> 
        define the programming model for Java EE components that take advantage 
        of the services defined by this specification, the responsibilities of 
        the component developer, and the annotations used by the component 
        developer to specify metadata.
      </para>
      <para>
        <xref linkend="injectionelresolution"/>, <xref linkend="contexts"/>,
        <xref linkend="lifecycle"/>, <xref linkend="decorators"/>, 
        <xref linkend="events"/> and <xref linkend="interceptorresolution"/> 
        define the semantics and behavior of the services, the responsibilities 
        of the container implementation and the APIs used by the application to 
        interact directly with the container.
      </para>
      <para>
        <xref linkend="packagingdeployment"/> defines how Java EE applications
        that use the services defined by this specification must be packaged into
        bean archives, and the responsibilities of the container implementation 
        at application initialization time.
      </para>
      <para>
        <xref linkend="spi"/>, <xref linkend="contextual"/> and 
        <xref linkend="context"/> define an SPI that allows portable extensions
        to integrate with the container.
      </para>
    </section>
    
    <!--
    <section>
      <title>Supported environments</title>
      <para>
          An application that takes advantage of these services may be designed to execute 
          in either the Java EE 6, Java EE 5 or Java SE environments. If the application 
          executes in a Java SE environment, the embeddable EJB Lite container provides 
          Java EE services such as transaction management and persistence.
      </para>
      <para>
          Any Java EE 5 compliant container may support these services. However, certain 
          functionality defined by this specification is optional for Java EE 5
          containers. This is the case only when explicitly noted in this specification.
      </para>
      <para>
          Java EE 6 and embeddable EJB Lite containers must support all functionality
          defined by this specification.
      </para>
    </section>
    -->
    
    <section>
      <title>Relationship to other specifications</title>
      
      <para>An application developer creates container-managed components such as 
      JavaBeans, EJBs or servlets and then provides additional metadata that declares 
      additional behavior defined by this specification. These components may take 
      advantage of the services defined by this specification, together with the 
      enterprise and presentational aspects defined by other Java EE platform 
      technologies.</para>
        
      <para>In addition, this specification defines an SPI that allows alternative, 
      non-platform technologies to integrate with the container and the Java EE 
      environment, for example, alternative web presentation technologies.</para>

    <section>
      <title>Relationship to the Java EE platform specification</title>
        
      <para>In the Java EE 6 environment, all <emphasis>component classes supporting 
      injection</emphasis>, as defined by the Java EE 6 platform specification, may 
      inject beans via the dependency injection service.</para>
      
      <para>The Java EE platform specification defines a facility for injecting
      <emphasis>resources</emphasis> that exist in the <emphasis>Java EE component 
      environment</emphasis>. Resources are identified by string-based names. This
      specification bolsters that functionality, adding the ability to inject an 
      open-ended set of object types, including, but not limited to, component
      environment resources, based upon typesafe qualifiers.</para>
        
    </section>
    
    <section>
      <title>Relationship to EJB</title>
      
      <para>EJB defines a programming model for application components that access 
      transactional resources in a multi-user environment. EJB allows concerns such
      as role-based security, transaction demarcation, concurrency and scalability
      to be specified declaratively using annotations and XML deployment descriptors 
      and enforced by the EJB container at runtime.</para>
      
      <para>EJB components may be stateful, but are not by nature contextual. References 
      to stateful component instances must be explicitly passed between clients and 
      stateful instances must be explicitly destroyed by the application.</para>
      
      <para>This specification enhances the EJB component model with contextual lifecycle 
      management.</para>
            
      <para>Any session bean instance obtained via the dependency injection service is a 
      contextual instance. It is bound to a lifecycle context and is available to other 
      objects that execute in that context. The container automatically creates the instance 
      when it is needed by a client. When the context ends, the container automatically 
      destroys the instance.</para>
      
      <para>Message-driven and entity beans are by nature non-contextual objects and may
      not be injected into other objects.</para>
      
      <para>The container performs dependency injection on all session and message-driven 
      bean instances, even those which are not contextual instances.</para>
      
     </section>
    
    <section>
      <title>Relationship to managed beans</title>
      
      <para>The Managed Beans specification defines the basic programming model for
      application components managed by the Java EE container.</para>
      
      <para>As defined by this specification, most Java classes, including all JavaBeans,
      are managed beans.</para>
      
      <para>This specification defines contextual lifecycle management and dependency 
      injection as generic services applicable to all managed beans.</para>
      
      <para>Any managed bean instance obtained via the dependency injection service is a 
      contextual instance. It is bound to a lifecycle context and is available to other 
      objects that execute in that context. The container automatically creates the instance 
      when it is needed by a client. When the context ends, the container automatically 
      destroys the instance.</para>
      
      <para>The container performs dependency injection on all managed bean instances, 
      even those which are not contextual instances.</para>
      
     </section>
     
     <section>
       <title>Relationship to Dependency Injection for Java</title>
       
       <para>The Dependency Injection for Java specification defines a set of annotations
       for the declaring injected fields, methods and constructors of a bean. The dependency 
       injection service makes use of these annotations.</para>
       
     </section>
     
     <section>
       <title>Relationship to Java Interceptors</title>
       
       <para>The Java Interceptors specification defines the basic programming model and
       semantics for interceptors. This specification enhances that model by providing
       the ability to associate interceptors with beans using typesafe interceptor
       bindings.</para>
       
     </section>
    
    <section>
      <title>Relationship to JSF</title>
        
      <para>JavaServer Faces is a web-tier presentation framework that provides a 
      component model for graphical user interface components and an event-driven 
      interaction model that binds user interface components to objects accessible
      via Unified EL.</para>
        
      <para>This specification allows any bean to be assigned a Unified EL name. 
      Thus, a JSF application may take advantage of the sophisticated context 
      and dependency injection model defined by this specification.</para>
        
    </section>
    
    </section>
    
    <section>
      <title>Introductory examples</title>
      
      <para>The following examples demonstrate the use of lifecycle contexts and dependency
      injection.</para>
      
      <section>
      <title>JSF example</title>
      
      <para>The following JSF page defines a login prompt for a web application:</para>
      
      <programlisting><![CDATA[<f:view>
    <h:form>
        <h:panelGrid columns="2" rendered="#{!login.loggedIn}">
            <h:outputLabel for="username">Username:</h:outputLabel>
            <h:inputText id="username" value="#{credentials.username}"/>
            <h:outputLabel for="password">Password:</h:outputLabel>
            <h:inputText id="password" value="#{credentials.password}"/>
        </h:panelGrid>
        <h:commandButton value="Login" action="#{login.login}" rendered="#{!login.loggedIn}"/>
        <h:commandButton value="Logout" action="#{login.logout}" rendered="#{login.loggedIn}"/>
    </h:form>
</f:view>]]></programlisting>
      
      <para>The Unified EL expressions in this page refer to beans named
      <literal>credentials</literal> and <literal>login</literal>.</para>
      
      <para>The <literal>Credentials</literal> bean has a lifecycle that 
      is bound to the JSF request:</para>
      
      <programlisting>@Model
public class Credentials {
	
    private String username;
    private String password;
    
    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }
    
    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }
    
}</programlisting>

      <para>The <literal>@Model</literal> annotation defined in <xref linkend="model"/>
      is a <emphasis>stereotype</emphasis> that identifies the <literal>Credentials</literal> 
      bean as a model object in an MVC architecture.</para>

      <para>The <literal>Login</literal> bean has a lifecycle that is bound 
      to the HTTP session:</para>
      
      <programlisting><![CDATA[@SessionScoped @Model
public class Login implements Serializable {

    @Inject Credentials credentials;
    @Inject @Users EntityManager userDatabase;
    
    private CriteriaQuery<User> query;
    private Parameter<String> usernameParam;
    private Parameter<String> passwordParam;
    
    private User user;
    
    @Inject
    void initQuery(@Users EntityManagerFactory emf) {
        CriteriaBuilder cb = emf.getCriteriaBuilder();
        usernameParam = cb.parameter(String.class);
        passwordParam = cb.parameter(String.class);
        query = cb.createQuery(User.class);
        Root<User> u = query.from(User.class);
        query.select(u);
        query.where( cb.equal(u.get(User_.username), usernameParam), 
                     cb.equal(u.get(User_.password), passwordParam) );
    }

    public void login() {
    	
        List<User> results = userDatabase.createQuery(query)
            .setParameter(usernameParam, credentials.getUsername())
            .setParameter(passwordParam, credentials.getPassword())
            .getResultList();
        
        if ( !results.isEmpty() ) {
            user = results.get(0);
        }
        
    }
    
    public void logout() {
        user = null;
    }
    
    public boolean isLoggedIn() {
        return user!=null;
    }
    
    @Produces @LoggedIn User getCurrentUser() {
        if (user==null) {
            throw new NotLoggedInException();
        }
        else {
            return user;
        }
    }

}]]></programlisting>

      <para>The <literal>@SessionScoped</literal> annotation defined in
      <xref linkend="builtinscopes"/> is a <emphasis>scope type</emphasis> that specifies 
      the lifecycle of instances of <literal>Login</literal>. Managed beans with this scope
      must be serializable.</para>

      <para>The <literal>@Inject</literal> annotation defined by the Dependency Injection 
      for Java specification identifies an <emphasis>injected field</emphasis> which is
      initialized by the container when the bean is instantiated, or an <emphasis>initializer 
      method</emphasis> which is called by the container after the bean is instantiated, with 
      injected parameters.</para>
      
      <para>The <literal>@Users</literal> annotation is a qualifier type defined
      by the application:</para>
      
      <programlisting>@Qualifier
@Retention(RUNTIME)
@Target({METHOD, FIELD, PARAMETER, TYPE})
public @interface Users {}</programlisting>
      
      <para>The <literal>@LoggedIn</literal> annotation is another qualifier type defined
      by the application:</para>
      
      <programlisting>@Qualifier
@Retention(RUNTIME)
@Target({METHOD, FIELD, PARAMETER, TYPE})
public @interface LoggedIn {}</programlisting>

      <para>The <literal>@Produces</literal> annotation defined in 
      <xref linkend="declaringproducermethod"/> identifies the method 
      <literal>getCurrentUser()</literal> as a <emphasis>producer method</emphasis>, 
      which will be called whenever another bean in the system needs the currently 
      logged-in user, for example, whenever the <literal>user</literal> attribute of 
      the <literal>DocumentEditor</literal> class is injected by the container:</para>
      
      <programlisting>@Model
public class DocumentEditor {

    @Inject Document document;
    @Inject @LoggedIn User currentUser;
    @Inject @Documents EntityManager docDatabase;
    
    public void save() {
        document.setCreatedBy(currentUser);
        em.persist(document);
    }
    
}</programlisting>

      <para>The <literal>@Documents</literal> annotation is another application-defined
      qualifier type. The use of distinct qualifier types enables the container to distinguish
      which JPA persistence unit is required.</para>

      <para>When the login form is submitted, JSF assigns the entered username and password 
      to an instance of the <literal>Credentials</literal> bean that is automatically 
      instantiated by the container. Next, JSF calls the <literal>login()</literal> 
      method of an instance of <literal>Login</literal> that is automatically instantiated 
      by the container. This instance continues to exist for and be available to other 
      requests in the same HTTP session, and provides the <literal>User</literal> object 
      representing the current user to any other bean that requires it (for example, 
      <literal>DocumentEditor</literal>). If the producer method is called before the 
      <literal>login()</literal> method initializes the user object, it throws a 
      <literal>NotLoggedInException</literal>.</para>
      
    </section>
    
    <section>
      <title>EJB example</title>

      <para>Alternatively, we could write our <literal>Login</literal> bean to take 
      advantage of the functionality defined by EJB:</para>
      
      <programlisting><![CDATA[@Stateful @SessionScoped @Model
public class Login {

    @Inject Credentials credentials;
    @Inject @Users EntityManager userDatabase;
    
    ...
    
    private User user;
    
    @Inject
    void initQuery(@Users EntityManagerFactory emf) {
       ...
    }
    
    @TransactionAttribute(REQUIRES_NEW) 
    @RolesAllowed("guest")
    public void login() {
        ...
    }
    
    public void logout() {
        user = null;
    }
    
    public boolean isLoggedIn() {
        return user!=null;
    }
    
    @RolesAllowed("user")
    @Produces @LoggedIn User getCurrentUser() {
        ...
    }

}]]></programlisting>

      <para>The EJB <literal>@Stateful</literal> annotation specifies that this bean
      is an EJB stateful session bean. The EJB <literal>@TransactionAttribute</literal>
      and <literal>@RolesAllowed</literal> annotations declare the EJB transaction
      demarcation and security attributes of the annotated methods.</para>
      
    </section>
       
  <section>
    <title>Java EE component environment example</title>
    
    <para>In the previous examples, we injected container-managed persistence contexts
    using qualifier types. We need to tell the container what persistence context is
    being referred to by which qualifier type. We can declare references to persistence 
    contexts and other resources in the Java EE component environment in Java code.</para>
    
    <programlisting>public class Databases {
    
    @Produces @PersistenceContext(unitName="UserData")
    @Users EntityManager userDatabaseEntityManager;
    
    @Produces @PersistenceUnit(unitName="UserData")
    @Users EntityManagerFactory userDatabaseEntityManagerFactory;
    
    @Produces @PersistenceContext(unitName="DocumentData")
    @Documents EntityManager docDatabaseEntityManager;
    
}</programlisting>
  
    <para>The JPA <literal>@PersistenceContext</literal> and <literal>@PersistenceUnit</literal> 
    annotations identify the JPA persistence unit.</para>
      
  </section>
  
  <section>
    <title>Event example</title>
    
    <para>Beans may raise events. For example, our <literal>Login</literal> class could
    raise events when a user logs in or out.</para>
  
    <programlisting><![CDATA[@SessionScoped @Model
public class Login implements Serializable {

    @Inject Credentials credentials;
    @Inject @Users EntityManager userDatabase;
    
    @Inject @LoggedIn Event<User> userLoggedInEvent;
    @Inject @LoggedOut Event<User> userLoggedOutEvent;
    
    ...

    private User user;
    
    @Inject
    void initQuery(@Users EntityManagerFactory emf) {
       ...
    }
    
    public void login() {
    	
        List<User> results = ... ;
        
        if ( !results.isEmpty() ) {
            user = results.get(0);
            userLoggedInEvent.fire(user);
        }
        
    }
    
    public void logout() {
        userLoggedOutEvent.fire(user);
        user = null;
    }
    
    public boolean isLoggedIn() {
        return user!=null;
    }
    
    @Produces @LoggedIn User getCurrentUser() {
        ...
    }

}]]></programlisting>

    <para>The method <literal>fire()</literal> of the built-in bean of type 
    <literal>Event</literal> defined in <xref linkend="eventinterface"/> 
    allows the application to fire events. Events consist of an <emphasis>event 
    object</emphasis>&mdash;in this case the <literal>User</literal>&mdash;and 
    event qualifiers. Event qualifiers&mdash;such as <literal>@LoggedIn</literal> and
    <literal>@LoggedOut</literal>&mdash;allow event consumers to specify which 
    events of a certain type they are interested in.</para>

    <para>Other beans may observe these events and use them to synchronize their internal 
    state, with no coupling to the bean producing the events:</para>
    
    <programlisting><![CDATA[@SessionScoped
public class Permissions implements Serializable {

    @Produces
    private Set<Permission> permissions = new HashSet<Permission>();
    
    @Inject @Users EntityManager userDatabase;
    Parameter<String> usernameParam;
    CriteriaQuery<Permission> query;
    
    @Inject
    void initQuery(@Users EntityManagerFactory emf) {
        CriteriaBuilder cb = emf.getCriteriaBuilder();
        usernameParam = cb.parameter(String.class);
        query = cb.createQuery(Permission.class);
        Root<Permission> p = query.from(Permission.class);
        query.select(p);
        query.where( cb.equal(p.get(Permission_.user).get(User_.username), 
                     usernameParam) );
    }

    void onLogin(@Observes @LoggedIn User user) {
        permissions = new HashSet<Permission>( userDatabase.createQuery(query)
            .setParameter(usernameParam, user.getUsername())
            .getResultList() );
    }
    
    void onLogout(@Observes @LoggedOut User user {
        permissions.clear();
    }
    

}]]></programlisting>

    <para>The <literal>@Produces</literal> annotation applied to a field identifies the
    field as a producer field, as defined in <xref linkend="producerfield"/>, a kind of 
    shortcut version of a producer method. This producer field allows the permissions 
    of the current user to be injected to an injection point of type 
    <literal>Set&lt;Permission&gt;</literal>.</para>
    
    <para>The <literal>@Observes</literal> annotation defined in <xref linkend="observes"/>
    identifies the method with the annotated parameter as an <emphasis>observer 
    method</emphasis> that is called by the container whenever an event matching the type 
    and qualifiers of the annotated parameter is fired.</para>

  </section>
  
  <section>
    <title>Injection point metadata example</title>
    
    <para>It is possible to implement generic beans that introspect the injection point to 
    which they belong. This makes it possible to implement injection for <literal>Logger</literal>s,
    for example.</para>
    
    <programlisting>class Loggers {
    
    @Produces Logger getLogger(InjectionPoint injectionPoint) {
        return Logger.getLogger( injectionPoint.getMember().getDeclaringClass().getSimpleName() );
    }
    
}</programlisting>

    <para>The <literal>InjectionPoint</literal> interface defined in <xref linkend="injectionpoint"/>,
    provides metadata about the injection point to the object being injected into it.</para>
    
    <para>Then this class will have a <literal>Logger</literal> named <literal>"Permissions"</literal>
    injected:</para>
    
    <programlisting>@SessionScoped
public class Permissions implements Serializable {

    @Inject Logger log;
 
    ...
    
}</programlisting>
    
  </section>
  
  <!--
  <section>
    <title>Programmatic lookup example</title>
    
    <para>Beans which my be injected may also be obtained by programmatic 
    lookup.</para>
    
    <programlisting><![CDATA[public class VersionedData {
    
    @Inject @Any Instance<EntityManagerFactory> anyEntityManagerFactory;
    @Inject @Any Instance<DataAccess<?,?>> anyDataAccess;
    
    public void purgeAllHistoricalVersions() {
        for(EntityManagerFactory emf: anyEntityManagerFactory) {
            for ( EntityType<?> e: emf.getMetamodel().getEntities() ) {
                Class<DataAccess<?,?>> dac = getDataAccessClass( e.getJavaType() );
                DataAccess<?,?> da = anyDataAccess.select(dac).get();
                da.purgeHistoricalVersions();
            }
        }
    }
    
    private <T> Class<DataAccess<T,?>> getDataAccessClass(Class<T> entityClass) { 
        ... 
    }
    
}]]></programlisting>

    
  </section>
  -->
  
    <section>
      <title>Interceptor example</title>
      
      <para><emphasis>Interceptors</emphasis> allow common, cross-cutting
      concerns to be applied to beans via custom annotations. Interceptor types
      may be individually enabled or disabled at deployment time.</para>
      
      <para>The <literal>AuthorizationInterceptor</literal> class defines a custom
      authorization check:</para>
      
      <programlisting>@Secure @Interceptor 
public class AuthorizationInterceptor {
    
    @Inject @LoggedIn User user;
    @Inject Logger log;
    
    @AroundInvoke 
    public Object authorize(InvocationContext ic) throws Exception {
        try {
            if ( !user.isBanned() ) {
                log.fine("Authorized");
                return ic.proceed();
            }
            else {
                log.fine("Not authorized");
                throw new NotAuthorizedException();
            }
        }
        catch (NotAuthenticatedException nae) {
            log.fine("Not authenticated");
            throw nae;
        }
    }
    
}</programlisting>

      <para>The <literal>@Interceptor</literal> annotation, defined in
      <xref linkend="declaringinterceptor"/>, identifies the 
      <literal>AuthorizationInterceptor</literal> class as an interceptor. 
      The <literal>@Secure</literal> annotation is a custom
      <emphasis>interceptor binding type</emphasis>, as defined in
      <xref linkend="interceptorbindings"/>.</para>
      
      <programlisting>@Inherited
@InterceptorBinding
@Target({TYPE, METHOD})
@Retention(RUNTIME)
public @interface Secure {}</programlisting>

      <para>The <literal>@Secure</literal> annotation is used to apply the 
      interceptor to a bean:</para>

      <programlisting>@Model
public class DocumentEditor {

    @Inject Document document;
    @Inject @LoggedIn User user;
    @Inject @Documents EntityManager em;
    
    @Secure
    public void save() {
        document.setCreatedBy(currentUser);
        em.persist(document);
    }
    
}</programlisting>

      <para>When the <literal>save()</literal> method is invoked, the 
      <literal>authorize()</literal> method of the interceptor will
      be called. The invocation will proceed to the <literal>DocumentEditor</literal>
      class only if the authorization check is successful.</para>
      
    </section>
    
    <section>
      <title>Decorator example</title>
      
      <para><emphasis>Decorators</emphasis> are similar to interceptors,
      but apply only to beans of a particular Java interface. Like interceptors,
      decorators may be easily enabled or disabled at deployment time. Unlike
      interceptors, decorators are aware of the semantics of the intercepted
      method.</para>
      
      <para>For example, the <literal>DataAccess</literal> interface might be
      implemented by many beans:</para>
      
      <programlisting><![CDATA[public interface DataAccess<T, V> {
      
    public V getId(T object);
    public T load(V id);
    public void save(T object);
    public void delete(T object);
    
    public Class<T> getDataType();
      
}]]></programlisting>
      
      <para>The <literal>DataAccessAuthorizationDecorator</literal> class defines the
      authorization checks:</para>
      
      <programlisting><![CDATA[@Decorator 
public abstract class DataAccessAuthorizationDecorator<T, V> implements DataAccess<T, V> {
    
    @Inject @Delegate DataAccess<T, V> delegate;
    
    @Inject Logger log;
    @Inject Set<Permission> permissions;
    
    public void save(T object) {
        authorize(SecureAction.SAVE, object);
        delegate.save(object);
    }
      
    public void delete(T object) {
        authorize(SecureAction.DELETE, object);
        delegate.delete(object);
    }
    
    private void authorize(SecureAction action, T object) {
        V id = delegate.getId(object);
        Class<T> type = delegate.getDataType();
        if ( permissions.contains( new Permission(action, type, id) ) ) {
            log.fine("Authorized for " + action);
        }
        else {
            log.fine("Not authorized for " + action);
            throw new NotAuthorizedException(action);
        }
    }
    
}]]></programlisting>

      <para>The <literal>@Decorator</literal> annotation defined in
      <xref linkend="decoratorannotation"/> identifies the 
      <literal>DataAccessAuthorizationDecorator</literal> class as a
      decorator. The <literal>@Delegate</literal> annotation defined
      in <xref linkend="delegateattribute"/> identifies the 
      <emphasis>delegate</emphasis>, which the decorator uses to 
      delegate method calls to the container. The decorator applies to 
      any bean that implements <literal>DataAccess</literal>.</para>
    
      <para>The decorator intercepts invocations just like an interceptor. 
      However, unlike an interceptor, the decorator contains functionality 
      that is specific to the semantics of the method being called.</para>
    
      <para>Decorators may be declared abstract, relieving the developer of
      the responsibility of implementing all methods of the decorated interface.
      If a decorator does not implement a method of a decorated interface, 
      the decorator will simply not be called when that method is invoked 
      upon the decorated bean.</para>

    </section>

  </section>
  
</chapter>